name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - '**'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Fetch all history for all tags and branches
      run: git fetch --prune --unshallow --tags

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.5.0'
      
    - name: Determine Version
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true
        configFilePath: ./GitVersion.yml

    - name: Update project version
      uses: roryprimrose/set-vs-sdk-project-version@v1
      with:
        version: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
        assemblyVersion: ${{ steps.gitversion.outputs.AssemblySemVer }}
        fileVersion: ${{ steps.gitversion.outputs.MajorMinorPatch }}
        informationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal

    ## TODO:
    ##- name: Generate coverage report

    - name: Resolve project name
      shell: pwsh
      run: Add-Content -Path ${env:GITHUB_ENV} "`nprojectName=$(${env:GITHUB_REPOSITORY}.substring(${env:GITHUB_REPOSITORY}.IndexOf('/') + 1))" -Encoding utf8
      
    - name: Pack
      run: dotnet pack "./${{ env.projectName }}/${{ env.projectName }}.csproj" -c Release --no-build --include-symbols -o $GITHUB_WORKSPACE/staging

    - name: Publish build artifacts
      uses: actions/upload-artifact@master
      with:
        name: packages
        path: staging
    
    - shell: bash
      name: Write version
      run: |
        echo '${{ steps.gitversion.outputs.NuGetVersionV2 }}' > version.txt
    - name: Upload version
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt
      

  publish:
    needs: build
    runs-on: ubuntu-latest
    # Only run on pushes which should only be on the base repository
    if: github.event_name == 'push'

    steps:
    - name: Download packages
      uses: actions/download-artifact@v2
      with:
        name: packages
      
    - name: Setup nuget
      uses: nuget/setup-nuget@v1
            
    - name: Publish to MyGet.org
      env: 
        MYGET_API_KEY: ${{ secrets.MYGET_API_KEY }}
      run: nuget push *.*.symbols.nupkg MYGET_API_KEY -source https://www.myget.org/F/steveski-ci/api/v3/index.json

      
  release:
    needs: build
    runs-on: ubuntu-latest
    # Only run on pushes which should only be on the base repository and only where the branch is master or is a version tagged build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    steps:
    
    - name: Download packages
      uses: actions/download-artifact@v2
      with:
        name: packages
      
    - name: Download version
      uses: actions/download-artifact@v2
      with:
        name: version
    
    - name: Read version
      shell: bash
      run: |
        value=`cat version.txt`
        echo NuGetVersionV2=$(echo $value) >> $GITHUB_ENV 

    - name: Resolve project name
      shell: pwsh
      run: Add-Content -Path ${env:GITHUB_ENV} "`nprojectName=$(${env:GITHUB_REPOSITORY}.substring(${env:GITHUB_REPOSITORY}.IndexOf('/') + 1))" -Encoding utf8

    - name: Setup nuget
      uses: nuget/setup-nuget@v1

    #################
    - name: Publish to NuGet.org
      env: 
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: nuget push *.*.symbols.nupkg $NUGET_API_KEY -source https://api.nuget.org/v3/index.json

    - name: Create release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NuGetVersionV2 }}
        release_name: Release ${{ env.NuGetVersionV2 }}
        draft: false
        prerelease: ${{ contains(env.NuGetVersionV2, 'beta') }}
    
    - name: Upload release asset for package
      id: upload-release-asset-package
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.projectName }}.${{ env.NuGetVersionV2 }}.nupkg
        asset_name: ${{ env.projectName }}.${{ env.NuGetVersionV2 }}.nupkg
        asset_content_type: application/zip
    
    - name: Upload release asset for symbol package
      id: upload-release-asset-symbolpackage
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.projectName }}.${{ env.NuGetVersionV2 }}.symbols.nupkg
        asset_name: ${{ env.projectName }}.${{ env.NuGetVersionV2 }}.symbols.nupkg
        asset_content_type: application/zip
