name: CI

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest      
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      isPrerelease: ${{ steps.isprerelease.outputs.result }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x
            9.0.x
            8.0.x
    
      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '6.0.x'
        
      - name: Calculate version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.1.11

      - name: Determine if version is pre-release
        id: isprerelease
        run: |
          if [[ "${{ steps.gitversion.outputs.semVer }}" == *-* ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi
     
      - name: Restore dependencies
        run: dotnet restore
     
      - name: Build
        run: dotnet build --configuration Release /p:Version=${{ steps.gitversion.outputs.semVer }}
     
      - name: Test
        run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test_results.trx"
      
      # - name: Upload Coverage to Codecov
      #   uses: codecov/codecov-action@v5
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     slug: steveski/Perigee.Configuration.DependencyInjection
      #     files: '**/coverage.cobertura.xml'
      #     fail_ci_if_error: true
     
      - name: Resolve project name
        shell: pwsh
        run: Add-Content -Path ${env:GITHUB_ENV} "`nprojectName=$(${env:GITHUB_REPOSITORY}.substring(${env:GITHUB_REPOSITORY}.IndexOf('/') + 1))" -Encoding utf8
        
      - name: Pack
        run: dotnet pack "./${{ env.projectName }}/${{ env.projectName }}.csproj" -c Release --no-build -o $GITHUB_WORKSPACE/staging
        #run: dotnet pack "./${{ env.projectName }}/${{ env.projectName }}.csproj" -c Release --no-build --include-symbols -o $GITHUB_WORKSPACE/staging
     
      - name: Verify artifact path
        run: ls -la staging
     
      - name: Publish build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: '**/*.nupkg'
         
  publish:
    needs: build
    runs-on: ubuntu-latest
    # Only run on pushes which should only be on the base repository
    if: github.event_name == 'push'

    steps:
      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages

      - name: Upload to MyGet (pre-release only)
        if: needs.build.outputs.isPrerelease == 'true'
        run: |
          find . -name '*.nupkg' -print | while read pkg; do
            echo "Publishing $pkg to MyGet"
            dotnet nuget push "$pkg" \
              --api-key ${{ secrets.MYGET_API_KEY }} \
              --source https://www.myget.org/F/steveski-ci/api/v3/index.json \
              --skip-duplicate
          done

      - name: Upload to NuGet (release only)
        if: needs.build.outputs.isPrerelease == 'false'
        run: |
          find . -name '*.nupkg' -print | while read pkg; do
            echo "Publishing $pkg to NuGet.org"
            dotnet nuget push "$pkg" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done
      
      # - name: Create release
      #   id: create_release
      #   uses: actions/create-release@v1.1.4
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ needs.build.outputs.NuGetVersionV2 }}
      #     release_name: Release ${{ needs.build.outputs.NuGetVersionV2 }}
      #     draft: false
      #     prerelease: ${{ contains(needs.build.outputs.NuGetVersionV2, 'beta') }}
      
      # - name: Verify Pre Asset upload
      #   run: ls -la $GITHUB_WORKSPACE
      
      # - name: xxx
      #   run: echo ${{ env.projectName }}.${{ needs.build.outputs.NuGetVersionV2 }}.nupkg
      
      # - name: Upload release asset for package
      #   id: upload-release-asset-package
      #   uses: actions/upload-release-asset@v1.0.2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ${{ env.projectName }}.${{ needs.build.outputs.NuGetVersionV2 }}.nupkg
      #     asset_name: ${{ env.projectName }}.${{ needs.build.outputs.NuGetVersionV2 }}.nupkg
      #     asset_content_type: application/zip
      
      # - name: Upload release asset for symbol package
      #   id: upload-release-asset-symbolpackage
      #   uses: actions/upload-release-asset@v1.0.2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ${{ env.projectName }}.${{ needs.build.outputs.NuGetVersionV2 }}.symbols.nupkg
      #     asset_name: ${{ env.projectName }}.${{ needs.build.outputs.NuGetVersionV2 }}.symbols.nupkg
      #     asset_content_type: application/zip
